likwid-bench  -t copy -w S1:100kB:8
# Run copy becnchmark of size 100kB on 8 cores 

clcopy - Double-precision cache line copy, only touches first element of each cache line.
clload - Double-precision cache line load, only loads first element of each cache line.
clstore - Double-precision cache line store, only stores first element of each cache line.
copy - Double-precision vector copy, only scalar operations
copy_avx - Double-precision vector copy, optimized for AVX
copy_avx512 - Double-precision vector copy, optimized for AVX-
copy_mem - Double-precision vector copy, only scalar operations but with non-temporal stores
copy_mem_avx - Double-precision vector copy, uses AVX and non-temporal stores
copy_mem_sse - Double-precision vector copy, uses SSE and non-temporal stores
copy_sse - Double-precision vector copy, optimized for SSE
daxpy - Double-precision linear combination of two vectors, only scalar operations
daxpy_avx - Double-precision linear combination of two vectors, optimized for AVX
daxpy_avx512 - Double-precision linear combination of two vectors, optimized for AVX-
daxpy_avx_fma - Double-precision linear combination of two vectors, optimized for AVX FMAs
daxpy_mem_avx - Double-precision linear combination of two vectors, optimized for AVX and non-temporal stores
daxpy_mem_avx_fma - Double-precision linear combination of two vectors, optimized for AVX FMAs and non-temporal stores
daxpy_mem_sse - Double-precision linear combination of two vectors, optimized for SSE and non-temporal stores
daxpy_mem_sse_fma - Double-precision linear combination of two vectors, optimized for SSE FMAs and non temporal stores
daxpy_sp - Single-precision linear combination of two vectors, only scalar operations
daxpy_sp_avx - Single-precision linear combination of two vectors, optimized for AVX
daxpy_sp_avx_fma - Single-precision linear combination of two vectors, optimized for AVX FMAs
daxpy_sp_mem_avx - Single-precision linear combination of two vectors, optimized for AVX and non-temporal stores
daxpy_sp_mem_avx_fma - Single-precision linear combination of two vectors, optimized for AVX FMAs and non-temporal stores
daxpy_sp_mem_sse - Single-precision linear combination of two vectors, optimized for SSE and non-temporal stores
daxpy_sp_mem_sse_fma - Single-precision linear combination of two vectors, optimized for SSE FMAs and non-temporal stores
daxpy_sp_sse - Single-precision linear combination of two vectors, optimized for SSE
daxpy_sp_sse_fma - Single-precision linear combination of two vectors, optimized for SSE FMAs
daxpy_sse - Double-precision linear combination of two vectors, optimized for SSE
daxpy_sse_fma - Double-precision linear combination of two vectors, optimized for SSE FMAs
ddot - Double-precision dot product of two vectors, only scalar operations
ddot_avx - Double-precision dot product of two vectors, optimized for AVX
ddot_avx512 - Double-precision dot product of two vectors, optimized for AVX-
ddot_sp - Single-precision dot product of two vectors, only scalar operations
ddot_sp_avx - Single-precision dot product of two vectors, optimized for AVX
ddot_sp_sse - Single-precision dot product of two vectors, optimized for SSE
ddot_sse - Double-precision dot product of two vectors, optimized for SSE
load - Double-precision load, only scalar operations
load_avx - Double-precision load, optimized for AVX
load_avx512 - Double-precision load, optimized for AVX-
load_mem - Double-precision load, using non-temporal loads
load_sse - Double-precision load, optimized for SSE
store - Double-precision store, only scalar operations
store_avx - Double-precision store, optimized for AVX
store_avx512 - Double-precision store, optimized for AVX-
store_mem - Double-precision store, uses non-temporal stores
store_mem_avx - Double-precision store, uses AVX and non-temporal stores
store_mem_sse - Double-precision store, uses SSE and non-temporal stores
store_sse - Double-precision store, optimized for SSE
stream - Double-precision stream triad A(i) = B(i)*c + C(i), only scalar operations
stream_avx - Double-precision stream triad A(i) = B(i)*c + C(i), optimized for AVX
stream_avx512 - Double-precision stream triad A(i) = B(i)*c + C(i), optimized for AVX-
stream_avx_fma - Double-precision stream triad A(i) = B(i)*c + C(i), optimized for AVX FMAs
stream_mem - Double-precision stream triad A(i) = B(i)*c + C(i), uses SSE and non-temporal stores
stream_mem_avx - Double-precision stream triad A(i) = B(i)*c + C(i), uses AVX and non-temporal stores
stream_mem_avx_fma - Double-precision stream triad A(i) = B(i)*c + C(i), optimized for AVX FMAs and non-temporal stores
stream_mem_sse - Double-precision stream triad A(i) = B(i)*c + C(i), uses SSE and non-temporal stores
stream_mem_sse_fma - Double-precision stream triad A(i) = B(i)*c + C(i), uses SSE FMAs and non-temporal stores
stream_sp - Single-precision stream triad A(i) = B(i)*c + C(i), only scalar operations
stream_sp_avx - Single-precision stream triad A(i) = B(i)*c + C(i), optimized for AVX
stream_sp_avx_fma - Single-precision stream triad A(i) = B(i)*c + C(i), optimized for AVX FMAs
stream_sp_mem_avx - Single-precision stream triad A(i) = B(i)*c + C(i), optimized for AVX and non-temporal stores
stream_sp_mem_avx_fma - Single-precision stream triad A(i) = B(i)*c + C(i), optimized for AVX FMAs and non-temporal stores
stream_sp_mem_sse - Single-precision stream triad A(i) = B(i)*c + C(i), optimized for SSE and non-temporal stores
stream_sp_mem_sse_fma - Single-precision stream triad A(i) = B(i)*c + C(i), optimized for SSE FMAs and non-temporal stores
stream_sp_sse - Single-precision stream triad A(i) = B(i)*c + C(i), optimized for SSE
stream_sp_sse_fma - Single-precision stream triad A(i) = B(i)*c + C(i), optimized for SSE FMAs
stream_sse - Double-precision stream triad A(i) = B(i)*c + C(i), optimized for SSE
stream_sse_fma - Double-precision stream triad A(i) = B(i)*c + C(i), optimized for SSE FMAs
sum - Double-precision sum of a vector, only scalar operations
sum_avx - Double-precision sum of a vector, optimized for AVX
sum_avx512 - Double-precision sum of a vector, optimized for AVX-
sum_sp - Single-precision sum of a vector, only scalar operations
sum_sp_avx - Single-precision sum of a vector, optimized for AVX
sum_sp_sse - Single-precision sum of a vector, optimized for SSE
sum_sse - Double-precision sum of a vector, optimized for SSE
triad - Double-precision triad A(i) = B(i) * C(i) + D(i), only scalar operations
triad_avx - Double-precision triad A(i) = B(i) * C(i) + D(i), optimized for AVX
triad_avx512 - Double-precision triad A(i) = B(i) * C(i) + D(i), optimized for AVX-
triad_avx_fma - Double-precision triad A(i) = B(i) * C(i) + D(i), optimized for AVX FMAs
triad_mem_avx - Double-precision triad A(i) = B(i) * C(i) + D(i), uses AVX and non-temporal stores
triad_mem_avx_fma - Double-precision triad A(i) = B(i) * C(i) + D(i), optimized for AVX FMAs and non-temporal stores
triad_mem_sse - Double-precision triad A(i) = B(i) * C(i) + D(i), optimized for SSE and non-temporal stores
triad_mem_sse_fma - Double-precision triad A(i) = B(i) * C(i) + D(i), optimized for SSE FMAs and non-temporal stores
triad_sp - Single-precision triad A(i) = B(i) * C(i) + D(i), only scalar operations
triad_sp_avx - Single-precision triad A(i) = B(i) * C(i) + D(i), optimized for AVX
triad_sp_avx_fma - Single-precision triad A(i) = B(i) * C(i) + D(i), optimized for AVX FMAs
triad_sp_mem_avx - Single-precision triad A(i) = B(i) * C(i) + D(i), optimized for AVX and non-temporal stores
triad_sp_mem_avx_fma - Single-precision triad A(i) = B(i) * C(i) + D(i), optimized for AVX FMAs and non-temporal stores
triad_sp_mem_sse - Single-precision triad A(i) = B(i) * C(i) + D(i), optimized for SSE and non-temporal stores
triad_sp_mem_sse_fma - Single-precision triad A(i) = B(i) * C(i) + D(i), optimized for SSE FMAs and non-temporal stores
triad_sp_sse - Single-precision triad A(i) = B(i) * C(i) + D(i), optimized for SSE
triad_sp_sse_fma - Single-precision triad A(i) = B(i) * C(i) + D(i), optimized for SSE FMAs
triad_sse - Double-precision triad A(i) = B(i) * C(i) + D(i), optimized for SSE
triad_sse_fma - Double-precision triad A(i) = B(i) * C(i) + D(i), optimized for SSE FMAs
update - Double-precision vector update, only scalar operations
update_avx - Double-precision vector update, optimized for AVX
update_avx512 - Double-precision vector update, optimized for AVX-
update_sse - Double-precision vector update, optimized for SSE

likwid-bench  -t copy_avx512 -w S1:100kB

